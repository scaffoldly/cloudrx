name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npx prettier --check "**/*.ts"

      - name: Run lint
        run: npm run lint

      - name: Run build
        run: npm run build

  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: Unit Tests

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: Integration Tests

    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

  report-failures:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    name: Report Failures
    if: always() && github.ref == 'refs/heads/main' && (needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const unitTestsFailed = '${{ needs.unit-tests.result }}' === 'failure';
            const integrationTestsFailed = '${{ needs.integration-tests.result }}' === 'failure';
            
            let issueBody = `## üö® CI Failure on Main Branch\n\n`;
            issueBody += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            issueBody += `**Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            issueBody += `**Time:** ${new Date().toISOString()}\n\n`;
            
            issueBody += `### Failed Jobs:\n`;
            if (unitTestsFailed) {
              issueBody += `- ‚ùå Unit Tests\n`;
            }
            if (integrationTestsFailed) {
              issueBody += `- ‚ùå Integration Tests\n`;
            }
            
            issueBody += `\n### Next Steps:\n`;
            issueBody += `1. Review the [failed workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            issueBody += `2. Check the logs for specific error details\n`;
            issueBody += `3. Fix the failing tests\n`;
            issueBody += `4. Close this issue once resolved\n\n`;
            issueBody += `*This issue was automatically created by GitHub Actions.*`;
            
            const title = `CI Failure on main branch (${context.sha.substring(0, 7)})`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: issueBody,
              labels: ['bug', 'ci-failure', 'main-branch']
            });
            
            // Add a comment with investigation details
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              body: 'Claude will be automatically notified to investigate this CI failure.'
            });
            
            // Trigger claude workflow via workflow_dispatch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'claude.yml',
              ref: 'main',
              inputs: {
                trigger_type: 'ci_failure',
                issue_number: issue.data.number.toString(),
                commit_sha: context.sha,
                failed_jobs: JSON.stringify({
                  unit_tests: unitTestsFailed,
                  integration_tests: integrationTestsFailed
                })
              }
            });