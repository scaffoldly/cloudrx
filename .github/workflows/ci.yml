name: CI

on:
  push:
    branches-ignore: ['claude/**', 'dependabot/**']
  pull_request_target:
    branches: ['**']
  workflow_dispatch: {}

permissions: write-all

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run build
        run: npm run build

  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: Unit Tests

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  prerelease:
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    name: Pre-release to NPM
    if: github.ref == 'refs/heads/main' && success() && !contains(github.event.head_commit.message, '[skip-prerelease]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Generate pre-release version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          PRERELEASE_VERSION="${CURRENT_VERSION}-beta.${TIMESTAMP}.${SHORT_SHA}"
          echo "version=${PRERELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "current=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Publish pre-release to NPM
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create pre-release summary
        run: |
          echo "## üöÄ Pre-release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** cloudrx" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** beta" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Install the pre-release version:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install cloudrx@beta" >> $GITHUB_STEP_SUMMARY
          echo "# or specific version:" >> $GITHUB_STEP_SUMMARY
          echo "npm install cloudrx@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Add \`[skip-prerelease]\` to commit message to skip pre-release publishing." >> $GITHUB_STEP_SUMMARY

  request-merge:
    runs-on: ubuntu-latest
    # if:
    # - success()
    # - is a pull request
    # - PR is from dependabot
    # - PR is open
    # - PR is assigned to cnuss
    if: |
      success() &&
      github.event_name == 'pull_request_target' &&
      github.actor == 'dependabot[bot]' &&
      github.event.pull_request.state == 'open' &&
      contains(github.event.pull_request.requested_reviewers.*.login, 'cnuss')
    name: Request Merges
    needs: [quality-checks, unit-tests]
    steps:
      - name: Request merge
        uses: actions/github-script@v7
        env:
          COMMENT_BOT_TOKEN: ${{ secrets.COMMENT_BOT_TOKEN }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;

            // Post comment to trigger Claude merge using the token from env
            const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/issues/${pull_number}/comments`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.COMMENT_BOT_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                body: '@claude Please merge this PR'
              })
            });

            if (!response.ok) {
              throw new Error(`Failed to create comment: ${response.status} ${response.statusText}`);
            }

  report-failures:
    runs-on: ubuntu-latest
    name: Report Failures
    needs: [quality-checks, unit-tests, prerelease]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const qualityChecksFailed = '${{ needs.quality-checks.result }}' === 'failure';
            const unitTestsFailed = '${{ needs.unit-tests.result }}' === 'failure';
            const prereleaseFailed = '${{ needs.prerelease.result }}' === 'failure';

            if(!qualityChecksFailed && !unitTestsFailed && !prereleaseFailed) {
              console.log('No failures detected.');
              return;
            }

            let issueBody = `## üö® CI Failure on Main Branch\n\n`;
            issueBody += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            issueBody += `**Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            issueBody += `**Time:** ${new Date().toISOString()}\n\n`;

            issueBody += `### Failed Jobs:\n`;
            if (qualityChecksFailed) {
              issueBody += `- ‚ùå Quality Checks\n`;
            }
            if (unitTestsFailed) {
              issueBody += `- ‚ùå Unit Tests\n`;
            }
            if (prereleaseFailed) {
              issueBody += `- ‚ùå Pre-release Publishing\n`;
            }

            issueBody += `\n### Next Steps:\n`;
            issueBody += `1. Review the [failed workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
            issueBody += `2. Check the logs for specific error details\n`;
            issueBody += `3. Fix the failing tests or publishing issues\n`;
            issueBody += `4. Close this issue once resolved\n\n`;
            issueBody += `*This issue was automatically created by GitHub Actions.*`;

            const title = `CI Failure on main branch (${context.sha.substring(0, 7)})`;

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: issueBody,
              labels: ['bug', 'ci-failure', 'main-branch']
            });

            // Add a comment with investigation details using specific token
            const response = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/issues/${issue.data.number}/comments`, {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer ${{ secrets.COMMENT_BOT_TOKEN }}',
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                body: '@claude Please investigate this CI failure.'
              })
            });

            if (!response.ok) {
              throw new Error(`Failed to create comment: ${response.status} ${response.statusText}`);
            }
